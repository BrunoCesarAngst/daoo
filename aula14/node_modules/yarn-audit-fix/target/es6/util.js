import fs, { ensureDirSync, readFileSync } from 'fs-extra';
import cp from 'child_process';
import chalk from 'chalk';
import minimist from 'minimist';
import { resolve } from 'path';
import { glob } from './glob';
import { sync as pkgDir } from 'pkg-dir';
import { sync as findUp } from 'find-up';
import findCacheDir from 'find-cache-dir';
export const invoke = (cmd, args, cwd, silent = false, inherit = true) => {
    var _a;
    !silent && console.log(chalk.bold('invoke'), cmd, ...args);
    const stdio = inherit ? ['inherit', 'inherit', 'inherit'] : [null, null, null];
    const result = cp.spawnSync(cmd, args, { cwd, stdio });
    if (result.error || result.status) {
        throw result;
    }
    return (_a = result.stdout) === null || _a === void 0 ? void 0 : _a.toString().trim();
};
export const parseFlags = (argv) => minimist(argv, { '--': true });
const checkValue = (key, value, omitlist, picklist) => value !== 'false' && !omitlist.includes(key) && (!picklist.length || picklist.includes(key));
const formatFlag = (key) => (key.length === 1 ? '-' : '--') + key;
export const formatFlags = (flags, ...picklist) => Object.keys(flags).reduce((memo, key) => {
    const omitlist = ['_', '--'];
    const value = flags[key];
    const flag = formatFlag(key);
    if (checkValue(key, value, omitlist, picklist)) {
        memo.push(flag);
        if (value !== true) {
            memo.push(value);
        }
    }
    return memo;
}, []);
export const isWindows = () => process.platform === 'win32' || /^(msys|cygwin)$/.test(process.env.OSTYPE);
export const getSymlinkType = (type) => type === 'junction' && isWindows()
    ? type
    : 'dir';
// https://github.com/facebook/jest/issues/2993
export const getYarn = () => isWindows() ? 'yarn.cmd' : 'yarn';
export const getClosestNpm = (cmd) => {
    const pkgRoot = pkgDir(__dirname) + '';
    return findUp(dir => {
        const ref = resolve(dir, 'node_modules', '.bin', cmd);
        return fs.existsSync(ref) ? ref : undefined;
    }, { cwd: pkgRoot }) + '';
};
export const getNpm = (requireNpmBeta, allowNpmBeta, silent = false, isWin = isWindows()) => {
    const cmd = isWin ? 'npm.cmd' : 'npm';
    if (requireNpmBeta && !allowNpmBeta && !silent) {
        console.warn('The project looks like monorepo, so it is recommended to use `--npm-v7` flag');
    }
    return allowNpmBeta
        ? getClosestNpm(cmd)
        : cmd;
};
export const getWorkspaces = (cwd, manifest) => {
    let packages = manifest.workspaces;
    if (packages && packages.packages) {
        packages = packages.packages;
    }
    if (!packages || !packages.length) {
        return [];
    }
    // Turn workspaces into list of package.json files.
    return glob(packages.map((p) => p.replace(/\/?$/, '/package.json')), {
        cwd,
        realpath: true,
        ignore: '**/node_modules/**',
    });
};
export const readJson = (path) => JSON.parse(readFileSync(path).toString('utf-8').trim());
export const getTemp = (cwd, temp) => {
    if (temp) {
        const _temp = resolve(temp);
        ensureDirSync(_temp);
        return _temp;
    }
    return findCacheDir({ name: 'yarn-audit-fix', create: true, cwd }) + '';
};
